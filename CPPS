#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
#include <chrono>
#include <stdio.h>
#include <Windows.h>
using namespace std;

int nScreenWidth = 120;
int nScreenHeight = 40;

float fPlayerX = 1.0f;
float fPlayerY = 1.0f;
float fPlayerA = 0.0f;

int nMapHeight = 16;
int nMapWidth = 16;

float fFOV = 3.14159 / 3;
float fDepth = 30.0f;

int main()
{
	wchar_t* screen = new wchar_t[nScreenWidth * nScreenHeight];
	HANDLE hConsole = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
	SetConsoleActiveScreenBuffer(hConsole);
	DWORD dwBytesWritten = 0;

	wstring map;
	map += L"################";
	map += L"#..............#";
	map += L"#######........#";
	map += L"#..............#";
	map += L"#..............#";
	map += L"#....######....#";
	map += L"#..............#";
	map += L"#..............#";
	map += L"#..............#";
	map += L"#...#......#...#";
	map += L"#...#......#...#";
	map += L"#...#......#...#";
	map += L"#...#......#...#";
	map += L"#....######....#";
	map += L"#..............#";
	map += L"################";


	auto tp1 = chrono::system_clock::now();
	auto tp2 = chrono::system_clock::now();

	while (1) {
		tp2 = chrono::system_clock::now();
		chrono::duration <float> elapsedTime = tp1 - tp2;
		tp1 = tp2;
		float fElapsedTime = elapsedTime.count();

		if (GetAsyncKeyState((unsigned short)'A') & 0x8000) {
			fPlayerA -= (1.5f) * fElapsedTime;
		}

		if (GetAsyncKeyState((unsigned short)'D') & 0x8000) {
			fPlayerA += (1.5f) * fElapsedTime;
		}

		if (GetAsyncKeyState((unsigned short)'W') & 0x8000) {
			fPlayerX += sinf(fPlayerA) * .5f * fElapsedTime;
			fPlayerY += cosf(fPlayerA) * .5f * fElapsedTime;

			if (map[(int)fPlayerY * nMapWidth + (int)fPlayerX] == '#') {
				fPlayerX -= sinf(fPlayerA) * .5f * fElapsedTime;
				fPlayerY -= cosf(fPlayerA) * .5f * fElapsedTime;
			}
		}

		if (GetAsyncKeyState((unsigned short)'S') & 0x8000) {
			fPlayerX -= sinf(fPlayerA) * .5f * fElapsedTime;
			fPlayerY -= cosf(fPlayerA) * .5f * fElapsedTime;

			if (map[(int)fPlayerY * nMapWidth + (int)fPlayerX] == '#') {
				fPlayerX += sinf(fPlayerA) * .5f * fElapsedTime;
				fPlayerY += cosf(fPlayerA) * .5f * fElapsedTime;
			}
		}

		for (int x = 0; x < nScreenWidth; x++)
		{
			float fRayAngle = (fPlayerA - fFOV / 2.0f) + ((float)x / (float)nScreenWidth) * fFOV;

			float fDistanceToWall = 0.0f;

			bool bHitWall = false;
			bool bBoundary = false;

			float fEyeX = sinf(fRayAngle);
			float fEyeY = cosf(fRayAngle);

			while (!bHitWall && fDistanceToWall < fDepth) {
				fDistanceToWall += 0.1f;

				int nTestX = (int)(fPlayerX + fEyeX * fDistanceToWall);
				int nTestY = (int)(fPlayerY + fEyeY * fDistanceToWall);

				if (nTestX < 0 || nTestX >= nMapWidth || nTestY < 0 || nTestY >= nMapHeight) {
					bHitWall = true;
					fDistanceToWall = fDepth;
				}
				else if (map[nTestY * nMapWidth + nTestX] == '#') {
					bHitWall = true;

					vector <pair<float, float>> p;

					for (int tx = 0; tx < 2; tx++)
					{
						for (int ty = 0; ty < 2; ty++)
						{
							float vx = (float)nTestX + tx + fPlayerX;
							float vy = (float)nTestY + ty - fPlayerY;
							float d = sqrt(vx * vx + vy * vy);
							float dot = (fEyeX * vx / d) + (fEyeY * vy / d);
							p.push_back(make_pair(d, dot));
						}
					}

					sort(p.begin(), p.end(), [](const pair <float, float>& left, const pair <float, float>& right) {return left.first < right.first; });

					float fBound = 0.005;
					if (acos(p.at(0).second) < fBound) {
						bBoundary = true;
					}
					
					if (acos(p.at(1).second) < fBound) {
						bBoundary = true;
					}
				}
			}

			int nCeiling = (float)(nScreenHeight / 2.0) - nScreenHeight / ((float)fDistanceToWall);
			int nFloor = nScreenHeight - nCeiling;

			short nShade;

			if (fDistanceToWall <= fDepth / 3.0f) {
				nShade = 0x2588;
			}
			else if (fDistanceToWall < fDepth / 2.0f) {
				nShade = 0x2593;
			}
			else if (fDistanceToWall < fDepth / 1.5f) {
				nShade = 0x2592;
			}
			else if (fDistanceToWall < fDepth) {
				nShade = 0x2591;
			}
			else {
				nShade = ' ';
			}

			if (bBoundary) {
				nShade = ' ';
			}

			for (int y = 0; y < nScreenHeight; y++)
			{
				if (y <= nCeiling) {
					screen[y * nScreenWidth + x] = ' ';
				}
				else if (y > nCeiling && y <= nFloor) {
					screen[y * nScreenWidth + x] = nShade;
				}
				else {
					float b = 1.0f - ((float)y - nScreenHeight / 2.0) / ((float)nScreenHeight / 2.0);

					if (b < 0.25) {
						nShade = '#';
					}
					else if (b < 0.5) {
						nShade = 'x';
					}
					else if (b < 0.75) {
						nShade = '~';
					}
					else if (b < 0.9) {
						nShade = '-';
					}
					else {
						nShade = ' ';
					}

					screen[y * nScreenWidth + x] = nShade;
				}
			}
		}

		// Display Frame
		screen[nScreenWidth * nScreenHeight - 1] = '\0';
		WriteConsoleOutputCharacter(hConsole, screen, nScreenWidth * nScreenHeight, { 0,0 }, &dwBytesWritten);
	}
	return 0;
}
